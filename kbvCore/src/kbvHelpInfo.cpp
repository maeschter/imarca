/*****************************************************************************
 * kbv help info dialog
 * (C): G. Trauth, Erlangen
 * LastChanged: 2021-12-01
 * Created: 2009.10.17
 * This program is free software under the terms of the GNU General Public License,
 * either version 3 of the License, or (at your option) any later version.
 * For details see the GNU General Public License <http://www.gnu.org/licenses/>.
 *****************************************************************************/
#include <QtDebug>
#include <QtSql>
#include "kbvSetvalues.h"
#include "kbvConstants.h"
#include "kbvHelpInfo.h"

extern  KbvSetvalues          *settings;

KbvHelpInfo::KbvHelpInfo(QWidget *parent) : QDialog(parent)
{
  QString     str;
  QFile       bt;
  QTextStream ts;
  QStringList headerLabels;

  this->setWindowTitle(QString(tr("About Imarca")));
  ui.setupUi(this);
  ui.infoTabs->setTabText(ui.infoTabs->indexOf(ui.tabInfo), QString(tr("&Info")));
  ui.infoTabs->setTabText(ui.infoTabs->indexOf(ui.tabLicence), QString(tr("&Licence")));
  ui.infoTabs->setTabText(ui.infoTabs->indexOf(ui.tabPlugins), QString(tr("&Plugins")));
  ui.infoTabs->setCurrentIndex(0);

  str = QString("Imarca:\nThis program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.\nThis program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.\nYou should have received a copy of the GNU General Public License  along with this program.  If not, see <http://www.gnu.org/licenses/>.");
  str.append(QString("\n\nExiv2:\nExiv2 is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.\nExiv2 is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE."));
  str.append(QString("\n\nAnimated Book:\nTerms of use (preloaders.net): You are encouraged and legally entitled to copy and modify any animated GIF and APNG images, generated by http://preloaders.net web-site.\nAll animated GIF and APNG images are completely free to use in all projects (web and desktop applications, freeware and commercial projects)."));
  ui.licenceTextEdit->setPlainText(str);

  headerLabels.append(QString(tr("Plugin")));
  headerLabels.append(QString(tr("Version")));
  headerLabels.append(QString(tr("Provider")));
  headerLabels.append(QString(tr("Abstract")));
  ui.pluginsTable->setHorizontalHeaderLabels(headerLabels);
  ui.pluginsTable->horizontalHeader()->setVisible(true);
  ui.pluginsTable->setColumnWidth(0,120);
  ui.pluginsTable->setColumnWidth(1,60);
  ui.pluginsTable->setColumnWidth(2,120);
  

  authorTimer.setSingleShot(true);
  authorTimer.setInterval(2000);

  author << tr("GT - Project owner/programmer")
         << tr("Time - mostly absent without permission")
         << tr("Beelzebub - often sitting on my desk");

  ui.infoAuthorLbl->setText(author[0]);
  str = QString(appName);
  str += "  ";
  str += QString(appVersion);
  ui.infoVersionLbl->setText(str);

  ui.infoCopyrightLbl->setText(QString(copyrightInfo));

  //read build date from ressource file kbv_buildtime
  str = QString(":/kbv/other/kbv_buildtime");
  bt.setFileName(str);
  str = "Build " ;
  if(bt.open(QIODevice::ReadOnly | QIODevice::Text))
    {
      ts.setDevice(&bt);
      str.append(ts.readLine());
      bt.close();
    }
  str.append(", Qt ");
  str.append(QString(QT_VERSION_STR));
  ui.infoBuildLbl->setText(str);

  index = 0;
  database = "";

  connect(&authorTimer,          SIGNAL(timeout()),           this, SLOT(scrollAuthorsByTimer()));
  connect(ui.infoButtClose,      SIGNAL(rejected()),          this, SLOT(accept()));
  connect(ui.infoTabs,           SIGNAL(currentChanged(int)), this, SLOT(specialTabActivated(int)));
  connect(ui.infoTabs,           SIGNAL(currentChanged(int)), this, SLOT(pluginsTabActivated(int)));

  //Tab "Special" only
  ui.infoTabs->setTabEnabled(ui.infoTabs->indexOf(ui.tabSpecial), false);
  connect(ui.specialCombo,       SIGNAL(activated(int)),  this, SLOT(comboItemActivated(int)));
  connect(ui.specialButtonApply, SIGNAL(clicked()),  this, SLOT(specialApply()));
}

KbvHelpInfo::~KbvHelpInfo()
{
  //qDebug() << "KbvHelpInfo::~KbvHelpInfo"; //###########
  ui.pluginsTable->clear();
}

/*************************************************************************//*!
 * SLOT: Timer expired: select next entry of list and display it. Start timer.
 */
void    KbvHelpInfo::scrollAuthorsByTimer()
{
  index++;
  if(index >= author.length())
    {
      index = 0;
    }
  ui.infoAuthorLbl->setText(author[index]);
  authorTimer.start();
}
/*************************************************************************//*!
 * Starts the timer when dialog is shown and the list of authors is valid.
 */
void    KbvHelpInfo::showEvent(QShowEvent *event)
{
  Q_UNUSED(event);
  if(author.length() > 0)
    {
      authorTimer.start();
    }
  index = 0;
  //qDebug() << "KbvHelpInfo::showEvent"; //###########
}
/*************************************************************************//*!
 * Ok button clicked. Stop timer and hide dialog.
 */
void    KbvHelpInfo::accept()
{
  authorTimer.stop();
  hide();
}
/*************************************************************************//*!
 * Take list of version infos on required libraries.
 */
void    KbvHelpInfo::setLibraryInfos(const QStringList &info)
{
  pluginsList.append(info);
}
/*************************************************************************//*!
 * Take list of loaded plugins.
 */
void    KbvHelpInfo::setPluginsList(const QStringList &plugins)
{
  pluginsList.append(plugins);
}

/*************************************************************************//*!
 * Tab 'plugins': fill tab elements with data when table is empty.
 */
void    KbvHelpInfo::pluginsTabActivated(int index)
{
  QTableWidgetItem  *item;
  int               count, col=4;
  
  if(ui.infoTabs->indexOf(ui.tabPlugins) == index)
    {
      if(ui.pluginsTable->rowCount() == 0)
        {
          count = pluginsList.size()/col;
          //qDebug() << "KbvHelpInfo::activatePlugins pluginsTab rows" <<count; //###########
          for(int k=0; k<count; k++)
            {
              ui.pluginsTable->insertRow(k);
              item = new QTableWidgetItem(pluginsList.at(col*k+0));
              ui.pluginsTable->setItem(k, 0, item);
              item = new QTableWidgetItem(pluginsList.at(col*k+1));
              item->setTextAlignment(Qt::AlignCenter);
              ui.pluginsTable->setItem(k, 1, item);
              item = new QTableWidgetItem(pluginsList.at(col*k+2));
              ui.pluginsTable->setItem(k, 2, item);
              item = new QTableWidgetItem(pluginsList.at(col*k+3));
              ui.pluginsTable->setItem(k, 3, item);
            }
        }
    }
}

/* Functions of tab "Special ************************************************/
/*************************************************************************//*!
 * Tab 'special': fill tab elements with data.
 */
void    KbvHelpInfo::specialTabActivated(int index)
{
  QDir      dir;
  QStringList   nameFilter, filelist;

  if(ui.infoTabs->indexOf(ui.tabSpecial) == index)
    {
      //Read database names
      dir.setPath(settings->dataBaseDir);
      dir.setFilter(QDir::Files | QDir::NoSymLinks);
      nameFilter << "*"+QString(dbNameExt);
      dir.setNameFilters(nameFilter);
      filelist = dir.entryList();
      //qDebug() << "KbvHelpInfo::activateSpecial files" <<dbDir <<filelist; //###########

      ui.specialCombo->addItems(filelist);
      database = filelist.first();    //default
    }
}
/*************************************************************************//*!
 * Tab 'special': database in comboBox selected.
 */
void    KbvHelpInfo::comboItemActivated(int index)
{
  database = ui.specialCombo->itemText(index);
  //qDebug() << "KbvHelpInfo::comboItemActivated" <<database; //###########
}
/*************************************************************************//*!
 * Tab 'special': apply button pressed.
 */
void    KbvHelpInfo::specialApply()
{
}
/****************************************************************************/
